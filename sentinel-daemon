#!/bin/bash
[[ $EUID -ne 0 ]] && echo 'This script must be run as root' && exit 255
source ./env

# Prepare folders
test ! -d $WORK_DIR && mkdir $_

# Workaround variables
declare -A PROCESSES

# Log pid of process
echo $! > $WORK_DIR/$PID_FILE

load_config() {
  println 'Loading configs'
  # Clean staff
  unset $PROCESSES
  echo -n > $PIDS_FILE

  # Iterate through all configs
  for file in $(ls $CONFIG_DIR); do
    PROCESSES["$file"]=$CONFIG_DIR/$file
    source $CONFIG_DIR/$file
    test -f $pid_file && cat $_ >> $PIDS_FILE
  done
  println 'Loaded configs: '${#PROCESSES[@]}
}

# Print stdout info
println() {
  echo $(date '+[%Y-%m-%d %H:%M:%S %Z]')" $1"
}

# Checking system
spawn_checkers() {
  declare -A pids
  for p in ${!PROCESSES[@]}; do
    (
      . ${PROCESSES[$p]}
      running=$([[ -s $pid_file && -e /proc/$(cat $pid_file) ]] && echo 1 || echo 0)
      status=$([[ "$running" == "1" ]] && echo 'up' || echo 'down')
      if [[ "$running" == "0" ]]; then
        (echo "$start" | bash &)
        status='pending'
      fi
      echo $status > $WORK_DIR/$p.status
    ) & pids[$p]=$!
  done
  wait

  # Check finish of all pids
  for p in ${!pids[@]}; do
    println $p...$(cat $WORK_DIR/$p.status)
  done
}

# Start monitor loop
test -f $RELOAD_FILE && rm -f $_
load_config
while true; do
  # Reload if got new configs and needs
  test -f $RELOAD_FILE &&  rm -f $_ && println 'Reloading configs signal' && load_config
  test -f $QUIT_FILE && rm -f $_ && println 'Exiting due to quit file' && exit 0
  spawn_checkers
  sleep $CHECK_TIMEOUT
done
